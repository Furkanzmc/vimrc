snippet def "#define ..."
#define $1
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet once "Header Guard" b
#ifndef ${1:guard}
#define ${2:$1}
${VISUAL}$0
#endif
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${1:type} ${2:var} = 0; $2 < ${3:count}; ${4:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}();
};
endsnippet

snippet cla "Full Header File"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}();
};
endsnippet

snippet qclass "Qt Class Decleration"
class ${1:`!p snip.rv = snip.basename or "name"`} : public QObject
{
	Q_OBJECT

public:
	explicit ${1/(\w+).*/$1/}(QObject* parent = nullptr);
};
endsnippet

snippet qitem "QQuickItem Class"
class ${1:`!p snip.rv = snip.basename or "name"`} : public QQuickItem
{
	Q_OBJECT

public:
	explicit ${1/(\w+).*/$1/}(QQuickItem* parent = nullptr);
};
endsnippet

snippet qprop "Qt Property Macro"
Q_PROPERTY(${1:type} ${2:name} READ ${3:$2} WRITE set${4:$2} NOTIFY ${5:$2}Changed)
endsnippet

snippet ns "New Namespace"
namespace ${1:name}
{
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet array "std::array (v)"
std::array<${1:type}, ${2:count}> arr$0;
endsnippet

snippet func "Basic C++ function template" b
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${4:FunctionBody}
}
endsnippet

snippet enum "enum ..."
enum class ${1:name} {
	${2:First},
	${3:Second}
}
endsnippet

snippet qreg "qmlRegisterType ..."
qmlRegisterType<${1:class}>("${2:namespace}", ${3:1}, ${4:0}, "${5:$1}");
endsnippet

snippet qregsing "qmlRegisterSingletonType ..."
qmlRegisterSingletonType<${1:class}>("${2:namespace}", ${3:1}, ${4:0}, ${5:$1}::singletonProvider);
endsnippet


# vim:ft=snippets:
